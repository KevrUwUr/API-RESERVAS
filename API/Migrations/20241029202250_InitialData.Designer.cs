// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20241029202250_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingId");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingId");

                    b.HasIndex("ClientId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("d9388df8-4c1e-4d8f-85d8-742bb3d3befe"),
                            ClientId = new Guid("ee0e166f-501a-4a8e-a2c5-a1b508c2bd55"),
                            EndDate = new DateTime(2024, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookingId = new Guid("b27f97c6-3af8-4f15-8414-7e3cb3e4ff15"),
                            ClientId = new Guid("c2132a7f-fc83-4c61-ab45-1214950ac542"),
                            EndDate = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookingId = new Guid("8f3f7af9-345b-4a1f-9e4d-d68b2a81267f"),
                            ClientId = new Guid("16e058cf-35a2-44bf-8512-4657406404a2"),
                            EndDate = new DateTime(2025, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookingId = new Guid("e3db7602-54d4-42f3-93c8-d4f3de5cfb0d"),
                            ClientId = new Guid("5cabe610-a9eb-4cc4-b82a-95fecdad0d34"),
                            EndDate = new DateTime(2025, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookingId = new Guid("4a9f1b42-1c9c-497d-97f7-7a1741a7c287"),
                            ClientId = new Guid("fef7720a-a4df-4c07-85a3-42c1e19ceda6"),
                            EndDate = new DateTime(2025, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.BookingService", b =>
                {
                    b.Property<Guid>("BookingServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingServiceId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingServiceId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ServiceId");

                    b.ToTable("BookingServices");

                    b.HasData(
                        new
                        {
                            BookingServiceId = new Guid("0a1a0c8f-bb54-4f1a-9338-f5d1c1e5a601"),
                            BookingId = new Guid("d9388df8-4c1e-4d8f-85d8-742bb3d3befe"),
                            ServiceId = new Guid("98dc7f61-96b1-489f-8500-6101870b0549")
                        },
                        new
                        {
                            BookingServiceId = new Guid("0b2b0d8e-bc44-4f1a-9448-f6e2d2e6b702"),
                            BookingId = new Guid("d9388df8-4c1e-4d8f-85d8-742bb3d3befe"),
                            ServiceId = new Guid("70144abe-40a7-46cc-bfab-fa062b660168")
                        },
                        new
                        {
                            BookingServiceId = new Guid("0c3c0e7d-ca34-4f1a-9558-f7f3e3e7c803"),
                            BookingId = new Guid("d9388df8-4c1e-4d8f-85d8-742bb3d3befe"),
                            ServiceId = new Guid("ea349c4f-694e-4a0c-b05e-cb90e23824cf")
                        },
                        new
                        {
                            BookingServiceId = new Guid("1a2a0f8d-db24-4f1a-9668-f8e4e4e8d904"),
                            BookingId = new Guid("b27f97c6-3af8-4f15-8414-7e3cb3e4ff15"),
                            ServiceId = new Guid("98dc7f61-96b1-489f-8500-6101870b0549")
                        },
                        new
                        {
                            BookingServiceId = new Guid("1b3b1e7c-ec14-4f1a-9778-f9f5f5f9ea05"),
                            BookingId = new Guid("b27f97c6-3af8-4f15-8414-7e3cb3e4ff15"),
                            ServiceId = new Guid("70144abe-40a7-46cc-bfab-fa062b660168")
                        },
                        new
                        {
                            BookingServiceId = new Guid("2a3a1f8b-fc04-4f1a-9888-fa0606faeb06"),
                            BookingId = new Guid("8f3f7af9-345b-4a1f-9e4d-d68b2a81267f"),
                            ServiceId = new Guid("96e0c514-7682-4bfe-afb2-766354ef5fbd")
                        },
                        new
                        {
                            BookingServiceId = new Guid("2b4b2e7a-0c14-4f1a-9998-fb1717fbfb07"),
                            BookingId = new Guid("8f3f7af9-345b-4a1f-9e4d-d68b2a81267f"),
                            ServiceId = new Guid("70144abe-40a7-46cc-bfab-fa062b660168")
                        },
                        new
                        {
                            BookingServiceId = new Guid("2c5c3e79-1d24-4f1a-aaa8-fc2828fcfc08"),
                            BookingId = new Guid("8f3f7af9-345b-4a1f-9e4d-d68b2a81267f"),
                            ServiceId = new Guid("70144abe-40a7-46cc-bfab-fa062b660168")
                        },
                        new
                        {
                            BookingServiceId = new Guid("3a4a2f7a-2e34-4f1a-bbb8-fd3939fdfd09"),
                            BookingId = new Guid("e3db7602-54d4-42f3-93c8-d4f3de5cfb0d"),
                            ServiceId = new Guid("96e0c514-7682-4bfe-afb2-766354ef5fbd")
                        },
                        new
                        {
                            BookingServiceId = new Guid("3b5b3e6a-3f44-4f1a-ccc8-fe4a4afe0a10"),
                            BookingId = new Guid("e3db7602-54d4-42f3-93c8-d4f3de5cfb0d"),
                            ServiceId = new Guid("ea349c4f-694e-4a0c-b05e-cb90e23824cf")
                        },
                        new
                        {
                            BookingServiceId = new Guid("4a5a3f69-4f54-4f1a-ddd8-ff5b5bff1b11"),
                            BookingId = new Guid("4a9f1b42-1c9c-497d-97f7-7a1741a7c287"),
                            ServiceId = new Guid("245f42aa-dea2-4001-bf4e-d0ad2712068a")
                        },
                        new
                        {
                            BookingServiceId = new Guid("4b6b4e58-5664-4f1a-eee8-005c5c0c2c12"),
                            BookingId = new Guid("4a9f1b42-1c9c-497d-97f7-7a1741a7c287"),
                            ServiceId = new Guid("70144abe-40a7-46cc-bfab-fa062b660168")
                        },
                        new
                        {
                            BookingServiceId = new Guid("4c7c5e47-6674-4f1a-fff8-116d6d1d3d13"),
                            BookingId = new Guid("4a9f1b42-1c9c-497d-97f7-7a1741a7c287"),
                            ServiceId = new Guid("ea349c4f-694e-4a0c-b05e-cb90e23824cf")
                        });
                });

            modelBuilder.Entity("Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("ee0e166f-501a-4a8e-a2c5-a1b508c2bd55"),
                            Contact = "3024173538",
                            Email = "kevin@gmail.com",
                            Name = "Kevin Alejandro Marin Hoyos",
                            Password = "PasswordKevin123"
                        },
                        new
                        {
                            ClientId = new Guid("c2132a7f-fc83-4c61-ab45-1214950ac542"),
                            Contact = "3114044909",
                            Email = "test1@gmail.com",
                            Name = "Usuario test 1",
                            Password = "PasswordTest23"
                        },
                        new
                        {
                            ClientId = new Guid("16e058cf-35a2-44bf-8512-4657406404a2"),
                            Contact = "3123006578",
                            Email = "luis.perez@gmail.com",
                            Name = "Luis Fernando Pérez",
                            Password = "PasswordLuis456"
                        },
                        new
                        {
                            ClientId = new Guid("5cabe610-a9eb-4cc4-b82a-95fecdad0d34"),
                            Contact = "3205004897",
                            Email = "caro.rodriguez@gmail.com",
                            Name = "Carolina Rodríguez",
                            Password = "PasswordCaro789"
                        },
                        new
                        {
                            ClientId = new Guid("fef7720a-a4df-4c07-85a3-42c1e19ceda6"),
                            Contact = "3196001234",
                            Email = "javier.m@gmail.com",
                            Name = "Javier Mendoza",
                            Password = "PasswordJavier321"
                        });
                });

            modelBuilder.Entity("Entities.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ServiceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = new Guid("98dc7f61-96b1-489f-8500-6101870b0549"),
                            Name = "Habitación Deluxe"
                        },
                        new
                        {
                            ServiceId = new Guid("96e0c514-7682-4bfe-afb2-766354ef5fbd"),
                            Name = "Habitación Mediana"
                        },
                        new
                        {
                            ServiceId = new Guid("245f42aa-dea2-4001-bf4e-d0ad2712068a"),
                            Name = "Habitación Pequeña"
                        },
                        new
                        {
                            ServiceId = new Guid("70144abe-40a7-46cc-bfab-fa062b660168"),
                            Name = "Servicio de Transporte al Aeropuerto"
                        },
                        new
                        {
                            ServiceId = new Guid("ea349c4f-694e-4a0c-b05e-cb90e23824cf"),
                            Name = "Gimnasio y Piscina"
                        });
                });

            modelBuilder.Entity("Entities.Booking", b =>
                {
                    b.HasOne("Entities.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Entities.BookingService", b =>
                {
                    b.HasOne("Entities.Booking", "Booking")
                        .WithMany("BookingsServices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Service", "Service")
                        .WithMany("BookingsServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Entities.Booking", b =>
                {
                    b.Navigation("BookingsServices");
                });

            modelBuilder.Entity("Entities.Client", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Entities.Service", b =>
                {
                    b.Navigation("BookingsServices");
                });
#pragma warning restore 612, 618
        }
    }
}
